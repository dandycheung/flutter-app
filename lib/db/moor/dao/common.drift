import '../mixin.drift';

baseMessageItems AS MessageItem:
SELECT message.message_id AS messageId,
    message.conversation_id AS conversationId,
    message.category AS type,
    message.content AS content,
    message.created_at AS createdAt,
    message.status AS status,
    message.media_status AS mediaStatus,
    message.media_waveform AS mediaWaveform,
    message.name AS mediaName,
    message.media_mime_type AS mediaMimeType,
    message.media_size AS mediaSize,
    message.media_width AS mediaWidth,
    message.media_height AS mediaHeight,
    message.thumb_image AS thumbImage,
    message.thumb_url AS thumbUrl, message.media_url AS mediaUrl,
    message.media_duration AS mediaDuration,
    message.quote_message_id AS quoteId,
    message.quote_content AS quoteContent,
    message.action AS actionName,
    message.shared_user_id AS sharedUserId,
    message.sticker_id AS stickerId,
    message.caption as caption,
    sender.user_id AS userId,
    sender.full_name AS userFullName,
    sender.identity_number AS userIdentityNumber,
    sender.app_id AS appId,
    sender.relationship AS relationship,
    sender.avatar_url AS avatarUrl,
    sender.membership as membership,
    COALESCE(sender.is_verified, FALSE) AS isVerified,
    sharedUser.full_name AS sharedUserFullName,
    sharedUser.identity_number AS sharedUserIdentityNumber,
    sharedUser.avatar_url AS sharedUserAvatarUrl,
    COALESCE(sharedUser.is_verified, FALSE) AS sharedUserIsVerified,
    sharedUser.app_id AS sharedUserAppId,
    sharedUser.membership AS sharedUserMembership,
    conversation.owner_id AS conversationOwnerId,
    conversation.category AS conversionCategory,
    conversation.name AS groupName,
    sticker.asset_url AS assetUrl,
    sticker.asset_width AS assetWidth,
    sticker.asset_height AS assetHeight,
    sticker.name AS assetName,
    sticker.asset_type AS assetType,
    participant.full_name AS participantFullName,
    participant.user_id AS participantUserId,
    COALESCE(snapshot.snapshot_id, safe_snapshot.snapshot_id) AS snapshotId,
    COALESCE(snapshot.type, safe_snapshot.type) AS snapshotType,
    COALESCE(snapshot.amount, safe_snapshot.amount) AS snapshotAmount,
    COALESCE(snapshot.memo, safe_snapshot.memo) AS snapshotMemo,
    COALESCE(snapshot.asset_id, safe_snapshot.asset_id) AS assetId,
    COALESCE(asset.symbol, token.symbol) AS assetSymbol,
    COALESCE(asset.icon_url, token.icon_url) AS assetIcon,
    chain.icon_url AS chainIcon,
    hyperlink.site_name AS siteName,
    hyperlink.site_title AS siteTitle,
    hyperlink.site_description AS siteDescription,
    hyperlink.site_image AS siteImage,
    messageMention.has_read AS mentionRead,
    em.expire_in AS expireIn,
    CASE WHEN pinMessage.message_id IS NOT NULL THEN TRUE ELSE FALSE END AS pinned
FROM messages message
         INNER JOIN users sender ON message.user_id = sender.user_id
         LEFT JOIN users participant ON message.participant_id = participant.user_id
         LEFT JOIN snapshots snapshot ON message.snapshot_id = snapshot.snapshot_id
         LEFT JOIN safe_snapshots safe_snapshot ON message.snapshot_id = safe_snapshot.snapshot_id
         LEFT JOIN assets asset ON snapshot.asset_id = asset.asset_id
         LEFT JOIN tokens token ON safe_snapshot.asset_id = token.asset_id
         LEFT JOIN chains chain ON asset.chain_id = chain.chain_id
         LEFT JOIN stickers sticker ON sticker.sticker_id = message.sticker_id
         LEFT JOIN hyperlinks hyperlink ON message.hyperlink = hyperlink.hyperlink
         LEFT JOIN users sharedUser ON message.shared_user_id = sharedUser.user_id
         LEFT JOIN conversations conversation
ON message.conversation_id = conversation.conversation_id
         LEFT JOIN message_mentions messageMention ON message.message_id = messageMention.message_id
         LEFT JOIN pin_messages pinMessage on message.message_id = pinMessage.message_id
         LEFT JOIN expired_messages em ON message.message_id = em.message_id
WHERE $where
ORDER BY $order
LIMIT $limit;

basePinMessageItems AS MessageItem:
SELECT message.message_id AS messageId,
    message.conversation_id AS conversationId,
    message.category AS type,
    message.content AS content,
    message.created_at AS createdAt,
    message.status AS status,
    message.media_status AS mediaStatus,
    message.media_waveform AS mediaWaveform,
    message.name AS mediaName,
    message.media_mime_type AS mediaMimeType,
    message.media_size AS mediaSize,
    message.media_width AS mediaWidth,
    message.media_height AS mediaHeight,
    message.thumb_image AS thumbImage,
    message.thumb_url AS thumbUrl, message.media_url AS mediaUrl,
    message.media_duration AS mediaDuration,
    message.quote_message_id AS quoteId,
    message.quote_content AS quoteContent,
    message.action AS actionName,
    message.shared_user_id AS sharedUserId,
    message.caption as caption,
    sender.user_id AS userId,
    sender.full_name AS userFullName,
    sender.identity_number AS userIdentityNumber,
    sender.app_id AS appId,
    sender.relationship AS relationship,
    sender.avatar_url AS avatarUrl,
    sender.membership as membership,
    COALESCE(sender.is_verified, FALSE) AS isVerified,
    sharedUser.full_name AS sharedUserFullName,
    sharedUser.identity_number AS sharedUserIdentityNumber,
    sharedUser.avatar_url AS sharedUserAvatarUrl,
    COALESCE(sharedUser.is_verified, FALSE) AS sharedUserIsVerified,
    sharedUser.app_id AS sharedUserAppId,
    sharedUser.membership AS sharedUserMembership,
    conversation.owner_id AS conversationOwnerId,
    conversation.category AS conversionCategory,
    conversation.name AS groupName,
    sticker.asset_url AS assetUrl,
    sticker.asset_width AS assetWidth,
    sticker.asset_height AS assetHeight,
    sticker.sticker_id AS stickerId,
    sticker.name AS assetName,
    sticker.asset_type AS assetType,
    participant.full_name AS participantFullName,
    participant.user_id AS participantUserId,
    COALESCE(snapshot.snapshot_id, safe_snapshot.snapshot_id) AS snapshotId,
    COALESCE(snapshot.type, safe_snapshot.type) AS snapshotType,
    COALESCE(snapshot.amount, safe_snapshot.amount) AS snapshotAmount,
    COALESCE(snapshot.memo, safe_snapshot.memo) AS snapshotMemo,
    COALESCE(snapshot.asset_id, safe_snapshot.asset_id) AS assetId,
    COALESCE(asset.symbol, token.symbol) AS assetSymbol,
    COALESCE(asset.icon_url, token.icon_url) AS assetIcon,
    chain.icon_url AS chainIcon,
    hyperlink.site_name AS siteName,
    hyperlink.site_title AS siteTitle,
    hyperlink.site_description AS siteDescription,
    hyperlink.site_image AS siteImage,
    messageMention.has_read AS mentionRead,
    em.expire_in AS expireIn,
    CASE WHEN pinMessage.message_id IS NOT NULL THEN TRUE ELSE FALSE END AS pinned
FROM pin_messages pinMessage
         INNER JOIN messages message ON message.message_id = pinMessage.message_id
         INNER JOIN users sender ON message.user_id = sender.user_id
         LEFT JOIN users participant ON message.participant_id = participant.user_id
         LEFT JOIN snapshots snapshot ON message.snapshot_id = snapshot.snapshot_id
         LEFT JOIN safe_snapshots safe_snapshot ON message.snapshot_id = safe_snapshot.snapshot_id
         LEFT JOIN assets asset ON snapshot.asset_id = asset.asset_id
         LEFT JOIN tokens token ON safe_snapshot.asset_id = token.asset_id
         LEFT JOIN chains chain ON asset.chain_id = chain.chain_id
         LEFT JOIN stickers sticker ON sticker.sticker_id = message.sticker_id
         LEFT JOIN hyperlinks hyperlink ON message.hyperlink = hyperlink.hyperlink
         LEFT JOIN users sharedUser ON message.shared_user_id = sharedUser.user_id
         LEFT JOIN conversations conversation
ON message.conversation_id = conversation.conversation_id
         LEFT JOIN message_mentions messageMention ON message.message_id = messageMention.message_id
         LEFT JOIN expired_messages em ON message.message_id = em.message_id
WHERE pinMessage.conversation_id = :conversationId
ORDER BY $order
LIMIT $limit;


fuzzySearchUserItem AS SearchItem:
SELECT 
    CASE 
        WHEN users.app_id IS NOT NULL AND LENGTH(users.app_id) > 0 THEN 'BOT'
        ELSE 'USER'
    END AS type,
    users.user_id AS id,
    users.full_name AS name,
    users.avatar_url AS avatar_url,
    COALESCE(users.is_verified, FALSE) AS is_verified,
    users.app_id AS app_id,
    users.membership AS membership,
    CASE 
        WHEN users.full_name = :query COLLATE NOCASE THEN 1.0 + 1.0/LENGTH(users.full_name)
        WHEN users.identity_number = :query COLLATE NOCASE THEN 0.9 + 1.0/LENGTH(users.identity_number)
        WHEN users.full_name LIKE :query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.6 + 1.0/LENGTH(users.full_name)
        WHEN users.identity_number LIKE :query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.5 + 1.0/LENGTH(users.identity_number)
        WHEN users.full_name LIKE '%' || :query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.3 + 1.0/LENGTH(users.full_name)
        WHEN users.identity_number LIKE '%' || :query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.2 + 1.0/LENGTH(users.identity_number)
        ELSE 0.0
    END AS match_score
FROM users
WHERE $where
ORDER BY match_score DESC
    limit $limit;


fuzzySearchConversationItem AS SearchItem:
WITH query_parts AS (
    SELECT 
        TRIM(:query) AS full_query,
        -- Extract up to 3 keywords from the query
        CASE WHEN INSTR(TRIM(:query), ' ') = 0 THEN TRIM(:query)
             ELSE TRIM(SUBSTR(TRIM(:query), 1, INSTR(TRIM(:query), ' ') - 1))
        END AS keyword1,
        CASE WHEN INSTR(TRIM(:query), ' ') = 0 THEN ''
             ELSE TRIM(SUBSTR(TRIM(:query), INSTR(TRIM(:query), ' ') + 1))
        END AS remaining1
),
split_query AS (
    SELECT 
        full_query,
        keyword1,
        CASE WHEN INSTR(remaining1, ' ') = 0 THEN remaining1
             ELSE TRIM(SUBSTR(remaining1, 1, INSTR(remaining1, ' ') - 1))
        END AS keyword2,
        CASE WHEN INSTR(remaining1, ' ') = 0 THEN ''
             ELSE TRIM(SUBSTR(remaining1, INSTR(remaining1, ' ') + 1))
        END AS remaining2
    FROM query_parts
),
final_keywords AS (
    SELECT 
        full_query,
        keyword1,
        keyword2,
        CASE WHEN INSTR(remaining2, ' ') = 0 THEN remaining2
             ELSE TRIM(SUBSTR(remaining2, 1, INSTR(remaining2, ' ') - 1))
        END AS keyword3
    FROM split_query
)
SELECT 
    CASE 
        WHEN conversation.category = 'GROUP' THEN 'GROUP'
        ELSE 'CONTACT'
    END AS type,
    conversation.conversation_id AS id,
    CASE 
        WHEN conversation.category = 'GROUP' THEN conversation.name
        ELSE owner.full_name
    END AS name,
    CASE 
        WHEN conversation.category = 'GROUP' THEN conversation.icon_url
        ELSE owner.avatar_url
    END AS avatar_url,
    COALESCE(owner.is_verified, FALSE) AS is_verified,
    owner.app_id AS app_id,
    CASE
        WHEN conversation.category = 'CONTACT' THEN owner.membership
        ELSE NULL
    END AS membership,
    -- Smart scoring: single keyword vs multi-keyword
    CASE 
        WHEN LENGTH(kw.full_query) = 0 THEN 0.0
        -- Single keyword logic
        WHEN LENGTH(kw.keyword2) = 0 THEN
            CASE 
                WHEN name = kw.full_query COLLATE NOCASE THEN 1.0 + 1.0/LENGTH(name)
                WHEN name LIKE kw.full_query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.6 + 1.0/LENGTH(name)
                WHEN name LIKE '%' || kw.full_query || '%' ESCAPE '\' COLLATE NOCASE THEN 0.3 + 1.0/LENGTH(name)
                ELSE 0.0
            END
        -- Multi-keyword logic (when keyword2 is not empty)
        WHEN (
            (LENGTH(kw.keyword1) > 0 AND name LIKE '%' || kw.keyword1 || '%' ESCAPE '\' COLLATE NOCASE) OR
            (LENGTH(kw.keyword2) > 0 AND name LIKE '%' || kw.keyword2 || '%' ESCAPE '\' COLLATE NOCASE) OR
            (LENGTH(kw.keyword3) > 0 AND name LIKE '%' || kw.keyword3 || '%' ESCAPE '\' COLLATE NOCASE)
        ) THEN 
            -- Base score: number of matched keywords
            (CASE WHEN LENGTH(kw.keyword1) > 0 AND name LIKE '%' || kw.keyword1 || '%' ESCAPE '\' COLLATE NOCASE THEN 1 ELSE 0 END +
             CASE WHEN LENGTH(kw.keyword2) > 0 AND name LIKE '%' || kw.keyword2 || '%' ESCAPE '\' COLLATE NOCASE THEN 1 ELSE 0 END +
             CASE WHEN LENGTH(kw.keyword3) > 0 AND name LIKE '%' || kw.keyword3 || '%' ESCAPE '\' COLLATE NOCASE THEN 1 ELSE 0 END) * 0.1 + 
            -- Bonus for sequential matching
            CASE 
                WHEN LENGTH(kw.keyword1) > 0 AND LENGTH(kw.keyword2) > 0 AND 
                     name LIKE '%' || kw.keyword1 || '%' || kw.keyword2 || '%' ESCAPE '\' COLLATE NOCASE THEN 0.2
                ELSE 0.0
            END +
            -- Bonus for exact sequence match (space-separated only)
            CASE 
                WHEN LENGTH(kw.keyword1) > 0 AND LENGTH(kw.keyword2) > 0 AND 
                     name LIKE '%' || kw.keyword1 || ' ' || kw.keyword2 || '%' ESCAPE '\' COLLATE NOCASE THEN 0.15
                ELSE 0.0
            END +
            -- Bonus for prefix matching
            CASE 
                WHEN LENGTH(kw.keyword1) > 0 AND name LIKE kw.keyword1 || '%' ESCAPE '\' COLLATE NOCASE THEN 0.1
                ELSE 0.0
            END +
            -- Length penalty factor
            1.0 / LENGTH(name)
        ELSE 0.0
    END AS match_score
FROM conversations conversation
    INNER JOIN users owner ON owner.user_id = conversation.owner_id
    CROSS JOIN final_keywords kw
WHERE $where
ORDER BY match_score DESC, conversation.pin_time DESC
    limit $limit;
